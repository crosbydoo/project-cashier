{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Opened database successfully\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "\n",
    "conn = sqlite3.connect(\"newsystem.db\")\n",
    "print(\"Opened database successfully\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Opened database successfully\n",
      "Create table complete\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "\n",
    "conn = sqlite3.connect(\"newsystem.db\",timeout=10)\n",
    "print(\"Opened database successfully\")\n",
    "\n",
    "conn.execute ('''CREATE TABLE the_mart\n",
    "                (ID_toko INT PRIMARY KEY NOT NULL,\n",
    "                 NAMA    TEXT NOT NULL,\n",
    "                 HARGA   INT  NOT NULL,\n",
    "                 JUMLAH  INT  NOT NULL,\n",
    "                 TOTAL   INT  NOT NULL,\n",
    "                 TIMESS  CHAR(50));''')\n",
    "\n",
    "conn.execute ('''CREATE TABLE the_warehouse\n",
    "                (ID_gudang INT PRIMARY KEY NOT NULL,\n",
    "                 NAMA       TEXT NOT NULL,\n",
    "                 HARGA      INT  NOT NULL,\n",
    "                 STOK       INT  NOT NULL,\n",
    "                 TOTAL      INT  NOT NULL,\n",
    "                 TIMESS     CHAR(50));''')\n",
    "\n",
    "conn.execute ('''CREATE TABLE transaksi\n",
    "                (ID_customer INT PRIMARY KEY NOT NULL,\n",
    "                 NAMA       TEXT NOT NULL,\n",
    "                 HARGA      INT  NOT NULL,\n",
    "                 JUMLAH      INT  NOT NULL,\n",
    "                 TOTAL      INT  NOT NULL,\n",
    "                 TIMESS     CHAR(50));''')\n",
    "\n",
    "\n",
    "print(\"Create table complete\")\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------\n",
      "WELCOME TO INVENTORY SYSTEM\n",
      "--------------------------------------------------\n",
      "1. The Market\n",
      "2. The Warehouse\n",
      "3. Reports Selling\n",
      "4. Check Connection Database\n",
      "0. Exit\n",
      "Insert your option: 2\n",
      "===========================\n",
      "INVENTORY SYSTEM MANAGEMENT WAREHOUSE\n",
      "===========================\n",
      "1. Insert Items\n",
      "2. Show Items\n",
      "3. Update Items\n",
      "4. Delete Items \n",
      "5. Find Items\n",
      "6. Back to Menu\n",
      "0. Exit\n",
      "Insert your option: 5\n",
      "Enter Name of Items: RTX\n",
      "ITEM NOT FOUND !\n",
      "Wanna try again[Y/N] ?y\n",
      "Enter Name of Items: RTX TI\n",
      "+-----------+--------+-------+------+--------+---------------------+\n",
      "| ID_gudang |  NAMA  | HARGA | STOK | TOTAL  |        TIMESS       |\n",
      "+-----------+--------+-------+------+--------+---------------------+\n",
      "|    3085   | RTX TI |  1000 | 100  | 100000 | 2021-01-04 23:17:38 |\n",
      "+-----------+--------+-------+------+--------+---------------------+\n"
     ]
    }
   ],
   "source": [
    "#KELOMOOK 4\n",
    "#Theofila Tiara Citra Panggabean 5200411406\n",
    "#Ristu Aji Wijayanto 5200411407\n",
    "#Muhammad Difa' Khairuddin 5200411408\n",
    "#Pramudea Yohano Firmansyah 5200411409\n",
    "#Fikriansyah Azidan 5200411410\n",
    "\n",
    "\n",
    "#IMPORT LIBRARY\n",
    "import os\n",
    "import sqlite3\n",
    "import datetime\n",
    "from random import randint\n",
    "from prettytable import PrettyTable\n",
    "\n",
    "#Variabel\n",
    "x = PrettyTable() \n",
    "timess = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n",
    "\n",
    "#get connection\n",
    "conn = sqlite3.connect(\"newsystem.db\", timeout=10)\n",
    "c = conn.cursor()\n",
    "\n",
    "def check(conn):\n",
    "    try:\n",
    "        select_sqlite = \"select sqlite_version();\"\n",
    "        c.execute(select_sqlite)\n",
    "        record = c.fetchall()\n",
    "        print(\"SQLite Database Version is: \", record)\n",
    "        c.close()\n",
    " \n",
    "    except sqlite3.Error as error:\n",
    "        print(\"Error Fail to connecting Database\", error)\n",
    "    finally:\n",
    "        if (conn):\n",
    "            conn.close()\n",
    "            print(\"Database connection complete\")\n",
    "    globalmain()\n",
    "        \n",
    "            \n",
    "#MENU GLOBAL\n",
    "def globalmain():\n",
    "    print(\"-\"*50)\n",
    "    print(\"WELCOME TO INVENTORY SYSTEM\")\n",
    "    print(\"-\"*50)\n",
    "    go = [\"1. The Market\",\n",
    "          \"2. The Warehouse\",\n",
    "          \"3. Reports Selling\",\n",
    "          \"4. Check Connection Database\",\n",
    "          \"0. Exit\"]\n",
    "    for mn in go:\n",
    "        print(mn)\n",
    "    gmo()\n",
    "    \n",
    "#OPTION GLOBAL MAIN MENU\n",
    "def gmo():\n",
    "    xt = int(input(\"Insert your option: \"))\n",
    "    if xt == 1 :\n",
    "        martmenu()\n",
    "    elif xt == 2:\n",
    "        main()\n",
    "    elif xt == 3:\n",
    "        mainreport()\n",
    "    elif xt == 4 :\n",
    "        check(conn)\n",
    "    elif xt == 0 :\n",
    "        input(\"Press enter to exit program...\")\n",
    "        print(\"Cпасибо dude\")\n",
    "    else:\n",
    "        print(\"FATAL WRONG INPUT !!!\")\n",
    "        input('Press enter to continue...')\n",
    "        globalmain()\n",
    "    \n",
    "\n",
    "######################################### MAIN FOR MARKET #################################################################\n",
    "######################################################### MAIN FOR MARKET #################################################\n",
    "\n",
    "def martmenu():\n",
    "    print(\"=\"*30)\n",
    "    print(\"THE MARKET SYSTEM MANAGEMENT\")\n",
    "    print(\"=\"*30)\n",
    "    opsim = [\"1. Sell Items\",\n",
    "             \"2. Show Items\",\n",
    "             \"3. Add to Mart\",\n",
    "             \"4. RestockItems\", \n",
    "             \"5. Delete Items \", \n",
    "             \"6. Find Items\",\n",
    "             \"7. Back to Menu\",\n",
    "             \"0. Exit\"]\n",
    "    for menus in opsim:\n",
    "        print(menus)\n",
    "    optionmart()\n",
    "    \n",
    "#OPTION OF MAIN \n",
    "def optionmart():\n",
    "    x = int(input(\"Insert your option: \"))\n",
    "    if x == 1 :\n",
    "        sell_item()\n",
    "    elif x == 2:\n",
    "        item_show()\n",
    "    elif x == 3 :\n",
    "        add_mart()\n",
    "    elif x == 4:\n",
    "        restock_item()\n",
    "    elif x == 5:\n",
    "        remove_items()\n",
    "    elif x == 6:\n",
    "        search_items(\"the_mart\")\n",
    "    elif x == 7:\n",
    "        globalmain()\n",
    "    elif x == 0:\n",
    "        input(\"Press enter to exit program...\")\n",
    "        print(\"Cпасибо dude\")\n",
    "    else:\n",
    "        print(\"FATAL WRONG INPUT !!!\")\n",
    "        input('Press enter to continue...')\n",
    "        martmenu()\n",
    "        \n",
    "def sell_item():\n",
    "        x.clear()\n",
    "        conn = sqlite3.connect('newsystem.db', timeout=10)\n",
    "        c = conn.execute('SELECT * from the_mart')\n",
    "        for row in c :\n",
    "            x.field_names = ['ID_toko', 'NAMA', 'HARGA', 'JUMLAH', 'TOTAL', 'TIMESS']\n",
    "            x.add_row(list(row))\n",
    "        print(x)\n",
    "        item_sell = input(\"Name items: \")\n",
    "        if(finding(item_sell,\"the_mart\")):\n",
    "                    id_cus = randint (1,99)\n",
    "                    nama = input(\"Nama: \")\n",
    "                    amountbeli = int(input(\"Jumlah: \"))\n",
    "                    harga = int(input(\"Harga: \"))\n",
    "                    waktu = timess\n",
    "                    totaly = amountbeli * harga\n",
    "                    queryinsert = \"INSERT INTO transaksi(ID_customer, NAMA, HARGA, JUMLAH, TOTAL, TIMESS) VALUES (?,?,?,?,?,?)\"\n",
    "                    data = (id_cus,nama,amountbeli,harga,totaly,waktu)\n",
    "                    c.execute (queryinsert,data)\n",
    "                    conn.commit()\n",
    "                    \n",
    "                    queryup = \"UPDATE the_mart set JUMLAH = JUMLAH - ?\"\n",
    "                    c.execute (queryup,(amountbeli,))\n",
    "                    conn.commit()\n",
    "\n",
    "                    print(\"..................\")\n",
    "                    print(\"DATA SAVED\")\n",
    "                    martmenu()\n",
    "               \n",
    "        else:\n",
    "            backmart()\n",
    "\n",
    "\n",
    "#SHOW ITEM / MENAMPILKAN ITEM\n",
    "def item_show():\n",
    "    x.clear()\n",
    "    conn = sqlite3.connect('newsystem.db', timeout=10)\n",
    "    c = conn.execute('SELECT * from the_mart')\n",
    "    for row in c :\n",
    "        x.field_names = ['ID_toko', 'NAMA', 'HARGA', 'JUMLAH', 'TOTAL', 'TIMESS']\n",
    "        x.add_row(list(row))\n",
    "    conn.close()\n",
    "    print(x)\n",
    "    backmart()    \n",
    "    \n",
    "    \n",
    "#ADD ITEM TO MART/TOKO\n",
    "def add_mart():\n",
    "        print(\"=======================\")\n",
    "        print(\"ADD YOUR ITEMS...\")\n",
    "        ids_item = randint (1000,9999)\n",
    "        names_item = input(\"Nama Item: \")\n",
    "        prices_item = int(input(\"Harga Item: \"))\n",
    "        stocks = int(input(\"Jumlah Item: \"))\n",
    "        totals = prices_item * stocks\n",
    "        tanggals = timess\n",
    "        verify = input(\"Are Sure to Save this items ? [Y/N]\")\n",
    "        if verify == \"Y\" or verify == \"y\":\n",
    "            inserted = \"INSERT INTO the_mart (ID_toko, NAMA, HARGA, JUMLAH, TOTAL, TIMESS) VALUES (?,?,?,?,?,?)\"\n",
    "            item_insert = (ids_item, names_item, prices_item, stocks, totals, tanggals)\n",
    "            c.execute(inserted, item_insert)\n",
    "            conn.commit()\n",
    "            conn.close()\n",
    "            print(\"Items Saved\")\n",
    "            backmart()\n",
    "        else:\n",
    "            backmart()\n",
    "    \n",
    "#DELETE ITEM\n",
    "def remove_items():\n",
    "        print('-'*50)\n",
    "        x.clear()\n",
    "        conn = sqlite3.connect('newsystem.db', timeout =10)\n",
    "        c = conn.execute('SELECT * from the_mart')\n",
    "        for row in c :\n",
    "            x.field_names = ['ID_toko', 'NAMA', 'HARGA', 'JUMLAH', 'TOTAL', 'TIMESS']\n",
    "            x.add_row(list(row))\n",
    "        print(x)\n",
    "        c = conn.cursor()\n",
    "        NumbIDs = int(input('Insert ID of items : '))\n",
    "        verifyy = input (\"Are you sure to delete [Y/N]\")\n",
    "        if verifyy == \"Y\" or verifyy == \"y\":\n",
    "            erased = 'DELETE from the_mart where ID_toko = \"{}\"'.format(NumbIDs)\n",
    "            c.execute(erased)\n",
    "            conn.commit()\n",
    "            print('Delete items successfull')\n",
    "            conn.close()\n",
    "            backmart()\n",
    "        else:\n",
    "            backmart()\n",
    "\n",
    "#FINDING ITEM \n",
    "def search_items(where):\n",
    "    x.clear\n",
    "    namaItems = input(\"Enter Name of Items: \")\n",
    "    if (find(namaItems,where)):\n",
    "        sql_select = \"SELECT * from the_mart where upper(NAMA)= ?\"\n",
    "        getInfo = c.execute(sql_select,(namaItems.upper(),)).fetchall()\n",
    "        for row in getInfo :\n",
    "            x.field_names = ['ID_toko', 'NAMA', 'HARGA', 'JUMLAH', 'TOTAL', 'TIMESS']\n",
    "            x.add_row(list(row))\n",
    "        print(x)\n",
    "        backmart()\n",
    "    else:\n",
    "        print(\"ITEM NOT FOUND !\")\n",
    "        blyat = input(\"Wanna try again[Y/N] ?\")\n",
    "        if blyat == \"Y\" or blyat ==\"y\":\n",
    "            Find_items(where)\n",
    "        else:\n",
    "            backmart()\n",
    "#finding items command\n",
    "def find(NAMA,where):\n",
    "    sql_select = \"SELECT NAMA from \"+where+\" where upper(NAMA)= ?\"\n",
    "    getInfo = c.execute(sql_select,(NAMA.upper(),))\n",
    "    \n",
    "    for row in getInfo:\n",
    "        if (NAMA.upper() == row[0].upper()):\n",
    "            return True\n",
    "    return False  \n",
    "        \n",
    "#UPADTE ITEMS                                 \n",
    "def restock_item():\n",
    "    x.clear()\n",
    "    c = conn.execute('SELECT * from the_warehouse')\n",
    "    for row in c :\n",
    "        x.field_name = ['ID_gudang','NAMA','HARGA','STOK','TOTAL','TIMESS']\n",
    "        x.add_row(list(row))\n",
    "    print(x)\n",
    "    namaItem = input(\"Insert Name Items: \")\n",
    "    if (finding(namaItem,\"the_warehouse\")):\n",
    "            if(finding(namaItem,\"the_mart\")):\n",
    "                stockt = int(input(\"Insert amount stock : \"))\n",
    "            \n",
    "                sql_updatetoko = \"UPDATE the_mart set JUMLAH = JUMLAH + ?\"\n",
    "                c.execute(sql_updatetoko,(stockt,))\n",
    "                conn.commit()\n",
    "            \n",
    "                sql_updategudang1= \"UPDATE the_warehouse set STOK = STOK - ?\"      \n",
    "                c.execute(sql_updategudang1,(stockt,))\n",
    "                conn.commit()\n",
    "\n",
    "                print(\"..................\")\n",
    "                print(\"DATA SAVED\")\n",
    "                martmenu()\n",
    "            else:\n",
    "                print(\"-\"*30)\n",
    "                print(\"WHERE'S THE ITEM???\")\n",
    "                print(\"-\"*30)\n",
    "                stockt = int(input(\"Insert an amount of item: \"))\n",
    "                sql_gudang = \"INSERT INTO the_mart(NAMA,JUMLAH) VALUES ((select NAMA from the_warehouse where upper(NAMA)= '\"+namaItem+\"'), ?)\"\n",
    "                c.execute(sql_gudang,(stockt,))\n",
    "                conn.commit()\n",
    "\n",
    "                backmart()\n",
    "    else:\n",
    "        print(\"DATA NOT FOUND !!!\")\n",
    "        backmart()\n",
    "        \n",
    "#KEMBALI PERULANGAN\n",
    "def backmart():\n",
    "        verify = input(\"Wanna back to program [Y/N] ?\")\n",
    "        if verify == 'Y' or verify == \"y\":\n",
    "            martmenu()\n",
    "        else:\n",
    "            input(\"Press ENTER to exit program...\")\n",
    "            print(\"Cпасибо dude\")\n",
    "\n",
    "\n",
    "######################################### MAIN FOR WAREHOUSE ##############################################################\n",
    "############################################################ MAIN FOR WAREHOUSE ###########################################            \n",
    "#MAIN FOR WAREHOUSE\n",
    "\n",
    "\n",
    "def main():\n",
    "    print(\"===========================\")\n",
    "    print(\"INVENTORY SYSTEM MANAGEMENT WAREHOUSE\")\n",
    "    print(\"===========================\")\n",
    "    opsi = [\"1. Insert Items\",\n",
    "            \"2. Show Items\",\n",
    "            \"3. Update Items\", \n",
    "            \"4. Delete Items \", \n",
    "            \"5. Find Items\",\n",
    "            \"6. Back to Menu\",\n",
    "            \"0. Exit\"]\n",
    "    for menu in opsi:\n",
    "        print(menu)\n",
    "    Option()\n",
    "    \n",
    "#OPTION OF MAIN \n",
    "def Option():\n",
    "    x = int(input(\"Insert your option: \"))\n",
    "    if x == 1 :\n",
    "        Insert_items()\n",
    "    elif x == 2:\n",
    "        Show_items()\n",
    "    elif x == 3:\n",
    "        Update_items()\n",
    "    elif x == 4:\n",
    "        Delete_items()\n",
    "    elif x == 5:\n",
    "        Find_items(\"the_warehouse\")\n",
    "    elif x == 6 :\n",
    "        globalmain()\n",
    "    elif x == 0:\n",
    "        input(\"Press enter to exit program...\")\n",
    "        print(\"Cпасибо dude\")\n",
    "    else:\n",
    "        print(\"FATAL WRONG INPUT !!!\")\n",
    "        input('Press enter to continue...')\n",
    "        main()\n",
    "        \n",
    "def Insert_items():\n",
    "        print(\"=======================\")\n",
    "        print(\"ADD YOUR ITEMS...\")\n",
    "        id_items = randint (1000,9999)\n",
    "        name_itemss = input(\"Nama Item: \")\n",
    "        price_items = int(input(\"Harga Item: \"))\n",
    "        stokss = int(input(\"Jumlah Item: \"))\n",
    "        totals = price_items * stokss\n",
    "        tanggalss = timess\n",
    "        verify = input(\"Are Sure to Save this items ? [Y/N]\")\n",
    "        if verify == \"Y\" or verify == \"y\":\n",
    "            inserted = \"INSERT INTO the_warehouse(ID_gudang, NAMA, HARGA, STOK, TOTAL, TIMESS) VALUES (?,?,?,?,?,?)\"\n",
    "            item_insert = (id_items, name_itemss, price_items, stokss, totals,tanggalss)\n",
    "            c.execute(inserted, item_insert)\n",
    "            conn.commit()\n",
    "\n",
    "            print(\"Items Saved\")\n",
    "            main()\n",
    "        else:\n",
    "            main()\n",
    "    \n",
    "    \n",
    "#SHOW ITEM / MENAMPILKAN ITEM\n",
    "def Show_items():\n",
    "    x.clear()\n",
    "    conn = sqlite3.connect('newsystem.db', timeout=10)\n",
    "    cursor = conn.execute('SELECT * from the_warehouse')\n",
    "    for row in cursor :\n",
    "        x.field_names = ['ID_gudang', 'NAMA', 'HARGA', 'STOK', 'TOTAL', 'TIMESS']\n",
    "        x.add_row(list(row))\n",
    "    conn.close()\n",
    "    print(x)\n",
    "    back()    \n",
    "    \n",
    "#DELETE ITEM\n",
    "def Delete_items():\n",
    "        print('-'*50)\n",
    "        x.clear()\n",
    "        conn = sqlite3.connect('newsystem.db', timeout =10)\n",
    "        c = conn.execute('SELECT * from the_warehouse')\n",
    "        for row in c :\n",
    "            x.field_names = ['ID_toko', 'NAMA', 'HARGA', 'STOK', 'TOTAL', 'TIMESS']\n",
    "            x.add_row(list(row))\n",
    "        print(x)\n",
    "        c = conn.cursor()\n",
    "        NumbID = int(input('Insert ID of items : '))\n",
    "        verify = input (\"Are you sure to delete [Y/N]\")\n",
    "        if verify == \"Y\" or verify == \"y\":\n",
    "            erase = 'DELETE from the_warehouse where ID_gudang = \"{}\"'.format(NumbID)\n",
    "            c.execute(erase)\n",
    "            conn.commit()\n",
    "            print('Delete items successfull')\n",
    "            conn.close()\n",
    "            back()\n",
    "        else:\n",
    "            back()\n",
    "\n",
    "#FINDING ITEM \n",
    "def Find_items(where):\n",
    "    x.clear\n",
    "    namaItem = input(\"Enter Name of Items: \")\n",
    "    if (finding(namaItem,where)):\n",
    "        sql_select = \"SELECT * from the_warehouse where upper(NAMA)= ?\"\n",
    "        getInfo = c.execute(sql_select,(namaItem.upper(),)).fetchall()\n",
    "        for row in getInfo :\n",
    "            x.field_names = ['ID_gudang', 'NAMA', 'HARGA', 'STOK', 'TOTAL', 'TIMESS']\n",
    "            x.add_row(list(row))\n",
    "        print(x)\n",
    "        back()\n",
    "    else:\n",
    "        print(\"ITEM NOT FOUND !\")\n",
    "        blat = input(\"Wanna try again[Y/N] ?\")\n",
    "        if blat == \"Y\" or blat ==\"y\":\n",
    "            Find_items(where)\n",
    "        else:\n",
    "            back()\n",
    "#finding items command\n",
    "def finding(NAMA,where):\n",
    "    sql_select = \"SELECT NAMA from \"+where+\" where upper(NAMA)= ?\"\n",
    "    getInfo = c.execute(sql_select,(NAMA.upper(),))\n",
    "    \n",
    "    for row in getInfo:\n",
    "        if (NAMA.upper() == row[0].upper()):\n",
    "            return True\n",
    "    return False  \n",
    "        \n",
    "#UPADTE ITEMS                                 \n",
    "def Update_items():\n",
    "    x.clear()\n",
    "    c = conn.execute('SELECT * from the_warehouse')\n",
    "    for row in c :\n",
    "        x.field_names = ['ID_gudang', 'NAMA', 'HARGA', 'JUMLAH', 'TOTAL', 'TIMESS']\n",
    "        x.add_row(list(row))\n",
    "    print(x)\n",
    "    namaItem = input(\"Insert Name Items: \")\n",
    "    if (finding(namaItem,\"the_warehouse\")):\n",
    "        print(\"Updating Information Items\", namaItem)\n",
    "        \n",
    "        sql_select = \"SELECT * from the_warehouse where upper(NAMA) = ?\"\n",
    "        getInfo = c.execute(sql_select,(namaItem.upper(),)).fetchall()\n",
    "        name_items = input(\"Name Item: \")\n",
    "        price_items = int(input(\"Price Item: \"))\n",
    "        stok = int(input(\"Stock item: \"))\n",
    "        total = price_items * stok\n",
    "        tanggal = timess\n",
    "        verify = input(\"Are Sure to Save this items ? [Y/N]\")\n",
    "        if verify == \"Y\" or verify ==\"y\":\n",
    "            sql_update = \"UPDATE the_warehouse set NAMA = ?,HARGA = ?, STOK = ?, TOTAL = ? where NAMA = ?\"\n",
    "            data = (name_items,price_items,stok,total,namaItem)\n",
    "            c.execute(sql_update,data)\n",
    "            conn.commit()\n",
    "            \n",
    "            print(\"..................\")\n",
    "            print(\"DATA SAVED\")\n",
    "            main()\n",
    "        else:\n",
    "            main()\n",
    "    else:\n",
    "        print(\"DATA NOT FOUND !!!\")\n",
    "        back()\n",
    "        \n",
    "#KEMBALI PERULANGAN\n",
    "def back():\n",
    "        verify = input(\"Wanna back to program [Y/N] ?\")\n",
    "        if verify == 'Y' or verify == \"y\":\n",
    "            main()\n",
    "        else:\n",
    "            input(\"Press ENTER to exit program...\")\n",
    "            print(\"Cпасибо dude\")\n",
    "            \n",
    "            \n",
    "\n",
    "\n",
    "######################################### REPORT SELLING #########################################3333#####################\n",
    "############################################################ REPORT SELLING ##########################3333#################            \n",
    "            \n",
    "#REPORT SELLING TRANSACTION\n",
    "\n",
    "\n",
    "def mainreport():\n",
    "    print(\"===========================\")\n",
    "    print(\"REPORT SELLING TRANSACTION\")\n",
    "    print(\"===========================\")\n",
    "    opsire = [\"10. Show Items\", \n",
    "            \"20. Delete Report \", \n",
    "            \"30. Check Database\",\n",
    "            \"40. Back to Menu\",\n",
    "            \"50. Exit\"]\n",
    "    for menuu in opsire:\n",
    "        print(menuu)\n",
    "    reportmen()\n",
    "    \n",
    "#OPTION OF MAIN \n",
    "def reportmen():\n",
    "    x = int(input(\"Insert your option: \"))\n",
    "    if x == 10 :\n",
    "        report_show()\n",
    "    elif x == 20:\n",
    "        remove_report()\n",
    "    elif x == 30:\n",
    "        check(conn)\n",
    "    elif x == 40:\n",
    "        globalmain()\n",
    "    elif x == 50:\n",
    "        input(\"Press enter to exit program...\")\n",
    "        print(\"Cпасибо dude\")\n",
    "    else:\n",
    "        print(\"FATAL WRONG INPUT !!!\")\n",
    "        input('Press enter to continue...')\n",
    "        reportmen()\n",
    "        \n",
    "        \n",
    "def remove_report():\n",
    "        print('-'*50)\n",
    "        x.clear()\n",
    "        conn = sqlite3.connect('newsystem.db', timeout =10)\n",
    "        c = conn.execute('SELECT * from transaksi')\n",
    "        for row in c :\n",
    "            x.field_names = ['ID_customer', 'NAMA', 'HARGA', 'JUMLAH', 'TOTAL', 'TIMESS']\n",
    "            x.add_row(list(row))\n",
    "        print(x)\n",
    "        c = conn.cursor()\n",
    "        NumbIds = int(input('Insert ID of items : '))\n",
    "        verify = input (\"Are you sure to delete [Y/N]\")\n",
    "        if verify == \"Y\" or verify == \"y\":\n",
    "            dell = 'DELETE from transaksi where ID_customer = \"{}\"'.format(NumbIds)\n",
    "            c.execute(dell)\n",
    "            conn.commit()\n",
    "            print('Delete items successfull')\n",
    "            conn.close()\n",
    "            backreport()\n",
    "        else:\n",
    "            backreport()\n",
    "\n",
    "def report_show():\n",
    "    x.clear()\n",
    "    conn = sqlite3.connect('newsystem.db', timeout=10)\n",
    "    cursor = conn.execute('SELECT * from transaksi')\n",
    "    for row in cursor :\n",
    "        x.field_names = ['ID_customer', 'NAMA', 'HARGA', 'JUMLAH', 'TOTAL', 'TIMESS']\n",
    "        x.add_row(list(row))\n",
    "    conn.close()\n",
    "    print(x)\n",
    "    backreport()    \n",
    "    \n",
    "#BACK FOR MAIN REPORT\n",
    "def backreport():\n",
    "        verify = input(\"Wanna back to program [Y/N] ?\")\n",
    "        if verify == 'Y' or verify == \"y\":\n",
    "            mainreport()\n",
    "        else:\n",
    "            input(\"Press ENTER to exit program...\")\n",
    "            print(\"Cпасибо dude\")\n",
    "            \n",
    "            \n",
    "\n",
    "            \n",
    "            \n",
    "#CALLING FUNCTION            \n",
    "globalmain()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
